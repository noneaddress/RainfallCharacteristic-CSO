"""
date:20230928
"""
#导入库
import SALib.sample.sobol
from SALib.sample import saltelli
from SALib.analyze import morris
from SALib.analyze import sobol
import numpy as np
import math

# problem and evaluate 1~5 correspond to 5 rain patterns (from b1 to A)
problem1 = {
    'num_vars':3,
    'names':['x1','x2','x3'],
    'bounds':[[5.1,124],[60,2878],[40.71,89.65]]
}
problem2 = {
    'num_vars':3,
    'names':['x1','x2','x3'],
    'bounds':[[5.3,90.2],[14,1462],[20.31,66.09]]
}
problem3 = {
    'num_vars':3,
    'names':['x1','x2','x3'],
    'bounds':[[5.1,210],[12,2463],[13.53,49.14]]
}
problem4 = {
    'num_vars':3,
    'names':['x1','x2','x3'],
    'bounds':[[5.1,166],[12,3110],[12.43,43.57]]
}
problem5 = {
    'num_vars':3,
    'names':['x1','x2','x3'],
    'bounds':[[5.1,162],[26,2786],[8.8,40.55]]
}
# Hard-coded model

def evaluate1(X):
    dict = {
        "p1": {
            "t1": 4.54579530016943,
            "t2": 7.17453796455066,
            "t3": 4.69437315787638,
            "t4": 9.35390694468476,
            "t5": 4.41729404165389,
        },
        "p2": {
            "t1": -0.986824668086619,
            "t2": -3.44647891457293,
            "t3": -4.66530280751918,
            "t4": -6.25259290129834,
            "t5": 0.657368138520199,
        },
        "p3": {
            "t1": 5.99107571202107,
            "t2": -81.6553950794186,
            "t3": -6.28182794981712,
            "t4": 25.3373263194807,
            "t5": -10.1203184982116,
        },
        "p4": {
            "t1": -3.64577968333594,
            "t2": 0.40072766404494,
            "t3": 2.80529679073955,
            "t4": 0.496724325320276,
            "t5": -0.933713423375391,
        },
        "p5": {
            "t1": -20.7387578501432,
            "t2": 2.27271250047761,
            "t3": -2.88058217851296,
            "t4": 4.76492799357587,
            "t5": -2.70932323824394,
        },
        "p6": {
            "t1": 1.52472402900277,
            "t2": 57.2918139252793,
            "t3": 3.36889441460362,
            "t4": -44.4971019965464,
            "t5": -1.35004058375031,
        },
        "p7": {
            "t1": 2.60233453291012,
            "t2": -1.03787895386994,
            "t3": 0.0757252176987156,
            "t4": -0.778963870450737,
            "t5": 2.18826716030027,
        },
        "p8": {
            "t1": -3.09151807412117,
            "t2": -2.67440977522584,
            "t3": -0.0931557266070117,
            "t4": -2.8446641464121,
            "t5": -0.0759440552224104,
        },
        "p9": {
            "t1": -0.285254042565211,
            "t2": 8.6035502901302,
            "t3": -3.26043983256275,
            "t4": -1.0193666002483,
            "t5": 0.489299592287658,
        },
        "p10": {
            "t1": 2.06637366475333,
            "t2": 3.67328049574821,
            "t3": 462.611745316705,
            "t4": 5.04981820854189,
            "t5": 2.6800369475377,
        },
        "p11": {
            "t1": 1.0193110645012,
            "t2": -2.03141326591051,
            "t3": 439.545836816729,
            "t4": -1.76652673515892,
            "t5": 436668995.094023,
        },
        "p12": {
            "t1": 7.0605821599034,
            "t2": -0.544909200464652,
            "t3": -2.27110513963056,
            "t4": 0.87135192246291,
            "t5": -13.6904424504986,
        },
        "p13": {
            "t1": 0.775632078649856,
            "t2": 7.44700168168615,
            "t3": 8.02176503498293,
            "t4": 10.4838842040382,
            "t5": 3.46826751582122,
        },
        "p14": {
            "t1": -20.0257670822168,
            "t2": -2.20648816009957,
            "t3": -8.00933677194874,
            "t4": -2.43453751072324,
            "t5": -21.3301918999047,
        },
        "p15": {
            "t1": 8.01511346556309,
            "t2": -10.1684833295472,
            "t3": -3.53913635518633,
            "t4": -21.0423139496775,
            "t5": -12.6754046254379,
        },
        "p16": {
            "t1": -7.78603879672979,
            "t2": -2.10144954619238,
            "t3": -461.107429718617,
            "t4": -4.27577979766939,
            "t5": -1.47567283090587,
        },

    }
    Y = []
    for x in X:
        # print(type(x))
        y = 1.230405893 + (1 / (0.9 - 0.1)) * (1 / (1 + np.exp(-(dict["p10"]["t1"] * (1 / (1 + np.exp(-(dict["p1"]["t1"] * (-1 + 2 * (x[0] - 5.2) / (123.98 - 5.2)) + dict["p4"]["t1"] * (-1 + 2 * (x[1] - 59) / (2878 - 59)) + dict["p7"]["t1"] * (-1 + 2 * (x[2] - 34.99) / (99.4 - 34.99)) + dict["p13"]["t1"])))) + dict["p11"]["t1"] * (1 / (1 + np.exp(-(dict["p2"]["t1"] * (-1 + 2 * (x[0] - 5.2) / (123.98 - 5.2)) +dict["p5"]["t1"] * (-1 + 2 * (x[1] - 59) / (2878 - 59)) +dict["p8"]["t1"] * (-1 + 2 * (x[2] - 34.99) / (99.4 - 34.99)) +dict["p14"]["t1"])))) + dict["p12"]["t1"] * (1 / (1 + np.exp(-(dict["p3"]["t1"] * (-1 + 2 * (x[0] - 5.2) / (123.98 - 5.2)) + dict["p6"]["t1"] * (-1 + 2 * (x[1] - 59) / (2878 - 59)) + dict["p9"]["t1"] * (-1 + 2 * (x[2] - 34.99) / (99.4 - 34.99)) + dict["p15"]["t1"])))) + dict["p16"]["t1"]))) - 0.1) * (34.6193145 - 1.230405893)
        Y.append(y)
    return Y
def evaluate2(X):
    dict = {
        "p1": {
            "t1": 4.54579530016943,
            "t2": 7.17453796455066,
            "t3": 4.69437315787638,
            "t4": 9.35390694468476,
            "t5": 4.41729404165389,
        },
        "p2": {
            "t1": -0.986824668086619,
            "t2": -3.44647891457293,
            "t3": -4.66530280751918,
            "t4": -6.25259290129834,
            "t5": 0.657368138520199,
        },
        "p3": {
            "t1": 5.99107571202107,
            "t2": -81.6553950794186,
            "t3": -6.28182794981712,
            "t4": 25.3373263194807,
            "t5": -10.1203184982116,
        },
        "p4": {
            "t1": -3.64577968333594,
            "t2": 0.40072766404494,
            "t3": 2.80529679073955,
            "t4": 0.496724325320276,
            "t5": -0.933713423375391,
        },
        "p5": {
            "t1": -20.7387578501432,
            "t2": 2.27271250047761,
            "t3": -2.88058217851296,
            "t4": 4.76492799357587,
            "t5": -2.70932323824394,
        },
        "p6": {
            "t1": 1.52472402900277,
            "t2": 57.2918139252793,
            "t3": 3.36889441460362,
            "t4": -44.4971019965464,
            "t5": -1.35004058375031,
        },
        "p7": {
            "t1": 2.60233453291012,
            "t2": -1.03787895386994,
            "t3": 0.0757252176987156,
            "t4": -0.778963870450737,
            "t5": 2.18826716030027,
        },
        "p8": {
            "t1": -3.09151807412117,
            "t2": -2.67440977522584,
            "t3": -0.0931557266070117,
            "t4": -2.8446641464121,
            "t5": -0.0759440552224104,
        },
        "p9": {
            "t1": -0.285254042565211,
            "t2": 8.6035502901302,
            "t3": -3.26043983256275,
            "t4": -1.0193666002483,
            "t5": 0.489299592287658,
        },
        "p10": {
            "t1": 2.06637366475333,
            "t2": 3.67328049574821,
            "t3": 462.611745316705,
            "t4": 5.04981820854189,
            "t5": 2.6800369475377,
        },
        "p11": {
            "t1": 1.0193110645012,
            "t2": -2.03141326591051,
            "t3": 439.545836816729,
            "t4": -1.76652673515892,
            "t5": 436668995.094023,
        },
        "p12": {
            "t1": 7.0605821599034,
            "t2": -0.544909200464652,
            "t3": -2.27110513963056,
            "t4": 0.87135192246291,
            "t5": -13.6904424504986,
        },
        "p13": {
            "t1": 0.775632078649856,
            "t2": 7.44700168168615,
            "t3": 8.02176503498293,
            "t4": 10.4838842040382,
            "t5": 3.46826751582122,
        },
        "p14": {
            "t1": -20.0257670822168,
            "t2": -2.20648816009957,
            "t3": -8.00933677194874,
            "t4": -2.43453751072324,
            "t5": -21.3301918999047,
        },
        "p15": {
            "t1": 8.01511346556309,
            "t2": -10.1684833295472,
            "t3": -3.53913635518633,
            "t4": -21.0423139496775,
            "t5": -12.6754046254379,
        },
        "p16": {
            "t1": -7.78603879672979,
            "t2": -2.10144954619238,
            "t3": -461.107429718617,
            "t4": -4.27577979766939,
            "t5": -1.47567283090587,
        },

    }
    Y = []
    for x in X:
        # print(type(x))
        y = 1.313004001 + (1 / (0.9 - 0.1)) * (1 / (1 + np.exp(-(dict["p10"]["t2"] * (1 / (1 + np.exp(-(dict["p1"]["t2"] * (-1 + 2 * (x[0] - 5.3) / (110.07 - 5.3)) + dict["p4"]["t2"] * (-1 + 2 * (x[1] - 14) / (1462 - 14)) + dict["p7"]["t2"] * (-1 + 2 * (x[2] - 20.31) / (94.45 - 20.31)) + dict["p13"]["t2"])))) + dict["p11"]["t2"] * (1 / (1 + np.exp(-(dict["p2"]["t2"] * (-1 + 2 * (x[0] - 5.3) / (110.07 - 5.3)) +dict["p5"]["t2"] * (-1 + 2 * (x[1] - 14) / (1462 - 14)) +dict["p8"]["t2"] * (-1 + 2 * (x[2] - 20.31) / (94.45 - 20.31)) + dict["p14"]["t2"])))) +dict["p12"]["t2"] * (1 / (1 + np.exp(-(dict["p3"]["t2"] * (-1 + 2 * (x[0] - 5.3) / (110.07 - 5.3)) + dict["p6"]["t2"] * (-1 + 2 * (x[1] - 14) / (1462 - 14)) + dict["p9"]["t2"] * (-1 + 2 * (x[2] - 20.31) / (94.45 - 20.31)) + dict["p15"]["t2"])))) + dict["p16"]["t2"]))) - 0.1) * (34.63522228 - 1.313004001)
        Y.append(y)
    return Y
def evaluate3(X):
    dict = {
        "p1": {
            "t1": 4.54579530016943,
            "t2": 7.17453796455066,
            "t3": 4.69437315787638,
            "t4": 9.35390694468476,
            "t5": 4.41729404165389,
        },
        "p2": {
            "t1": -0.986824668086619,
            "t2": -3.44647891457293,
            "t3": -4.66530280751918,
            "t4": -6.25259290129834,
            "t5": 0.657368138520199,
        },
        "p3": {
            "t1": 5.99107571202107,
            "t2": -81.6553950794186,
            "t3": -6.28182794981712,
            "t4": 25.3373263194807,
            "t5": -10.1203184982116,
        },
        "p4": {
            "t1": -3.64577968333594,
            "t2": 0.40072766404494,
            "t3": 2.80529679073955,
            "t4": 0.496724325320276,
            "t5": -0.933713423375391,
        },
        "p5": {
            "t1": -20.7387578501432,
            "t2": 2.27271250047761,
            "t3": -2.88058217851296,
            "t4": 4.76492799357587,
            "t5": -2.70932323824394,
        },
        "p6": {
            "t1": 1.52472402900277,
            "t2": 57.2918139252793,
            "t3": 3.36889441460362,
            "t4": -44.4971019965464,
            "t5": -1.35004058375031,
        },
        "p7": {
            "t1": 2.60233453291012,
            "t2": -1.03787895386994,
            "t3": 0.0757252176987156,
            "t4": -0.778963870450737,
            "t5": 2.18826716030027,
        },
        "p8": {
            "t1": -3.09151807412117,
            "t2": -2.67440977522584,
            "t3": -0.0931557266070117,
            "t4": -2.8446641464121,
            "t5": -0.0759440552224104,
        },
        "p9": {
            "t1": -0.285254042565211,
            "t2": 8.6035502901302,
            "t3": -3.26043983256275,
            "t4": -1.0193666002483,
            "t5": 0.489299592287658,
        },
        "p10": {
            "t1": 2.06637366475333,
            "t2": 3.67328049574821,
            "t3": 462.611745316705,
            "t4": 5.04981820854189,
            "t5": 2.6800369475377,
        },
        "p11": {
            "t1": 1.0193110645012,
            "t2": -2.03141326591051,
            "t3": 439.545836816729,
            "t4": -1.76652673515892,
            "t5": 436668995.094023,
        },
        "p12": {
            "t1": 7.0605821599034,
            "t2": -0.544909200464652,
            "t3": -2.27110513963056,
            "t4": 0.87135192246291,
            "t5": -13.6904424504986,
        },
        "p13": {
            "t1": 0.775632078649856,
            "t2": 7.44700168168615,
            "t3": 8.02176503498293,
            "t4": 10.4838842040382,
            "t5": 3.46826751582122,
        },
        "p14": {
            "t1": -20.0257670822168,
            "t2": -2.20648816009957,
            "t3": -8.00933677194874,
            "t4": -2.43453751072324,
            "t5": -21.3301918999047,
        },
        "p15": {
            "t1": 8.01511346556309,
            "t2": -10.1684833295472,
            "t3": -3.53913635518633,
            "t4": -21.0423139496775,
            "t5": -12.6754046254379,
        },
        "p16": {
            "t1": -7.78603879672979,
            "t2": -2.10144954619238,
            "t3": -461.107429718617,
            "t4": -4.27577979766939,
            "t5": -1.47567283090587,
        },

    }
    Y = []
    for x in X:
        # print(type(x))
        y = 1.225817109 + (1 / (0.9 - 0.1)) * (1 / (1 + np.exp(-(dict["p10"]["t3"] * (1 / (1 + np.exp(-(dict["p1"]["t3"] * (-1 + 2 * (x[0] - 5.03) / (215.4 - 5.03)) + dict["p4"]["t3"] * (-1 + 2 * (x[1] - 16) / (2516 - 16)) + dict["p7"]["t3"] * (-1 + 2 * (x[2] - 13.53) / (87.91 - 13.53)) + dict["p13"]["t3"])))) + dict["p11"]["t3"] * (1 / (1 + np.exp(-(dict["p2"]["t3"] * (-1 + 2 * (x[0] - 5.03) / (215.4 - 5.03)) + dict["p5"]["t3"] * (-1 + 2 * (x[1] - 16) / (2516 - 16)) + dict["p8"]["t3"] * (-1 + 2 * (x[2] - 0.1353) / (87.91 - 13.53)) +dict["p14"]["t3"])))) +dict["p12"]["t3"] * (1 / (1 + np.exp(-(dict["p3"]["t3"] * (-1 + 2 * (x[0] - 5.03) / (215.4 - 5.03)) + dict["p6"]["t3"] * (-1 + 2 * (x[1] - 16) / (2516 - 16)) + dict["p9"]["t3"] * (-1 + 2 * (x[2] - 13.53) / (87.91 - 13.53)) + dict["p15"]["t3"])))) + dict["p16"][ "t3"]))) - 0.1) * (35.71389239 - 1.225817109)
        Y.append(y)
    return Y
def evaluate4(X):
    dict = {
        "p1": {
            "t1": 4.54579530016943,
            "t2": 7.17453796455066,
            "t3": 4.69437315787638,
            "t4": 9.35390694468476,
            "t5": 4.41729404165389,
        },
        "p2": {
            "t1": -0.986824668086619,
            "t2": -3.44647891457293,
            "t3": -4.66530280751918,
            "t4": -6.25259290129834,
            "t5": 0.657368138520199,
        },
        "p3": {
            "t1": 5.99107571202107,
            "t2": -81.6553950794186,
            "t3": -6.28182794981712,
            "t4": 25.3373263194807,
            "t5": -10.1203184982116,
        },
        "p4": {
            "t1": -3.64577968333594,
            "t2": 0.40072766404494,
            "t3": 2.80529679073955,
            "t4": 0.496724325320276,
            "t5": -0.933713423375391,
        },
        "p5": {
            "t1": -20.7387578501432,
            "t2": 2.27271250047761,
            "t3": -2.88058217851296,
            "t4": 4.76492799357587,
            "t5": -2.70932323824394,
        },
        "p6": {
            "t1": 1.52472402900277,
            "t2": 57.2918139252793,
            "t3": 3.36889441460362,
            "t4": -44.4971019965464,
            "t5": -1.35004058375031,
        },
        "p7": {
            "t1": 2.60233453291012,
            "t2": -1.03787895386994,
            "t3": 0.0757252176987156,
            "t4": -0.778963870450737,
            "t5": 2.18826716030027,
        },
        "p8": {
            "t1": -3.09151807412117,
            "t2": -2.67440977522584,
            "t3": -0.0931557266070117,
            "t4": -2.8446641464121,
            "t5": -0.0759440552224104,
        },
        "p9": {
            "t1": -0.285254042565211,
            "t2": 8.6035502901302,
            "t3": -3.26043983256275,
            "t4": -1.0193666002483,
            "t5": 0.489299592287658,
        },
        "p10": {
            "t1": 2.06637366475333,
            "t2": 3.67328049574821,
            "t3": 462.611745316705,
            "t4": 5.04981820854189,
            "t5": 2.6800369475377,
        },
        "p11": {
            "t1": 1.0193110645012,
            "t2": -2.03141326591051,
            "t3": 439.545836816729,
            "t4": -1.76652673515892,
            "t5": 436668995.094023,
        },
        "p12": {
            "t1": 7.0605821599034,
            "t2": -0.544909200464652,
            "t3": -2.27110513963056,
            "t4": 0.87135192246291,
            "t5": -13.6904424504986,
        },
        "p13": {
            "t1": 0.775632078649856,
            "t2": 7.44700168168615,
            "t3": 8.02176503498293,
            "t4": 10.4838842040382,
            "t5": 3.46826751582122,
        },
        "p14": {
            "t1": -20.0257670822168,
            "t2": -2.20648816009957,
            "t3": -8.00933677194874,
            "t4": -2.43453751072324,
            "t5": -21.3301918999047,
        },
        "p15": {
            "t1": 8.01511346556309,
            "t2": -10.1684833295472,
            "t3": -3.53913635518633,
            "t4": -21.0423139496775,
            "t5": -12.6754046254379,
        },
        "p16": {
            "t1": -7.78603879672979,
            "t2": -2.10144954619238,
            "t3": -461.107429718617,
            "t4": -4.27577979766939,
            "t5": -1.47567283090587,
        },

    }
    Y = []
    for x in X:
        # print(type(x))
        y = 1.128534893 + (1 / (0.9 - 0.1)) * (1 / (1 + np.exp(-(dict["p10"]["t4"] * (1 / (1 + np.exp(-(dict["p1"]["t4"] * (-1 + 2 * (x[0] - 5.03) / (166.47 - 5.03)) + dict["p4"]["t4"] * (-1 + 2 * (x[1] - 12) / (3110 - 12)) + dict["p7"]["t4"] * (-1 + 2 * (x[2] - 12.43) / (95.94 - 12.43)) + dict["p13"]["t4"])))) + dict["p11"]["t4"] * (1 / (1 + np.exp(-(dict["p2"]["t4"] * (-1 + 2 * (x[0] - 5.03) / (166.47 - 5.03)) + dict["p5"]["t4"] * (-1 + 2 * (x[1] - 12) / (3110 - 12)) + dict["p8"]["t4"] * (-1 + 2 * (x[2] - 12.43) / (95.94 - 12.43)) +dict["p14"]["t4"])))) +dict["p12"]["t4"] * (1 / (1 + np.exp(-(dict["p3"]["t4"] * (-1 + 2 * (x[0] - 5.03) / (166.47 - 5.03)) + dict["p6"]["t4"] * (-1 + 2 * (x[1] - 12) / (3110 - 12)) + dict["p9"]["t4"] * (-1 + 2 * (x[2] - 12.43) / (95.94 - 12.43)) + dict["p15"]["t4"])))) + dict["p16"]["t4"]))) - 0.1) * (37.43988693 - 1.128534893)
        Y.append(y)
    return Y
def evaluate5(X):
    dict = {
        "p1": {
            "t1": -5.9910763161393,
            "t2": 5.84373712913129,
            "t3": 4.44798714923921,
            "t4": -9.73306573999363,
            "t5": 10.106180499435,
        },
        "p2": {
            "t1": -4.54579522837715,
            "t2": -3.13295998167416,
            "t3": 4.54066004698715,
            "t4": -248.228043666755,
            "t5": -4.42290512527125,
        },
        "p3": {
            "t1": 0.986824368094921,
            "t2": -65.2964990910019,
            "t3": -6.07689807262021,
            "t4": 89.786573899111,
            "t5": -0.654857142513989,
        },
        "p4": {
            "t1": -1.52472412159015,
            "t2": 0.468319351566387,
            "t3": 2.81488127672479,
            "t4": -1.75286434569767,
            "t5": 1.35241153947791,
        },
        "p5": {
            "t1": 3.64577960656798,
            "t2": 2.36604036003589,
            "t3": 2.4968154361014,
            "t4": 455.625021903122,
            "t5": 0.937570115547225,
        },
        "p6": {
            "t1": 20.7387592928682,
            "t2": 65.5332393383162,
            "t3": 3.39096053533272,
            "t4": 114.566066694096,
            "t5": 2.73611309016686,
        },
        "p7": {
            "t1": 0.285254086269138,
            "t2": -0.724318224138416,
            "t3": 0.139883574070817,
            "t4": 1.45285199456858,
            "t5": -0.48850728459715,
        },
        "p8": {
            "t1": -2.60233448264276,
            "t2": -2.34281780315964,
            "t3": 0.0680856159722358,
            "t4": 23.5915336257727,
            "t5": -2.18924340108561,
        },
        "p9": {
            "t1": 3.09151820767968,
            "t2": -1.89963730964656,
            "t3": -3.31555907702986,
            "t4": -366.66772111891,
            "t5": 0.0770398692031369,
        },
        "p10": {
            "t1": -7.06057994082074,
            "t2": 4.53697908037786,
            "t3": -68.1184780847907,
            "t4": -33.6820233764848,
            "t5": 13.713341149156,
        },
        "p11": {
            "t1": -2.06637367949282,
            "t2": -2.03154414086251,
            "t3": 90.9343087588699,
            "t4": -0.339223606798323,
            "t5": -2.67982267850169,
        },
        "p12": {
            "t1": -1.01931101077141,
            "t2": -0.532612651569376,
            "t3": -1.3131387007989,
            "t4": 2.98748246678444,
            "t5": -146.913469522024,
        },
        "p13": {
            "t1": -8.01511372585696,
            "t2": 6.45189487238333,
            "t3": 7.91209067521561,
            "t4": -14.911138132282,
            "t5": 12.6638337271152,
        },
        "p14": {
            "t1": -0.775632100268696,
            "t2": -1.9890006324694,
            "t3": 8.00986119705739,
            "t4": 238.694199793025,
            "t5": -3.47127459826069,
        },
        "p15": {
            "t1": 20.0257681699213,
            "t2": 4.71047542660961,
            "t3": -3.39750126197943,
            "t4": -215.691200826548,
            "t5": 6.4419596661056,
        },
        "p16": {
            "t1": 2.36022801642671,
            "t2": -2.91579386424616,
            "t3": -21.9093252618945,
            "t4": -1.48474358189784,
            "t5": 134.407467691641,
        },

    }
    Y = []
    for x in X:
        # print(type(x))
        y = 1.056643947 + (1 / (0.9 - 0.1)) * (1 / (1 + np.exp(-(dict["p10"]["t5"] * (1 / (1 + np.exp(-(dict["p1"]["t5"] * (-1 + 2 * (x[0] - 5.01) / (312.41 - 5.01)) + dict["p4"]["t5"] * (-1 + 2 * (x[1] - 26) / (2786 - 26)) + dict["p7"]["t5"] * (-1 + 2 * (x[2] - 8.8) / (96.47 - 8.8)) +dict["p13"]["t5"])))) + dict["p11"]["t5"] * (1 / (1 + np.exp(-(dict["p2"]["t5"] * (-1 + 2 * (x[0] - 5.01) / (312.41 - 5.01)) + dict["p5"]["t5"] * (-1 + 2 * (x[1] - 26) / (2786 - 26)) + dict["p8"]["t5"] * (-1 + 2 * (x[2] - 8.8) / (96.47 - 8.8)) +dict["p14"]["t5"])))) + dict["p12"]["t5"] * (1 / (1 + np.exp(-(dict["p3"]["t5"] * (-1 + 2 * (x[0] - 5.01) / (312.41 - 5.03)) + dict["p6"]["t5"] * (-1 + 2 * (x[1] - 26) / (2786 - 26)) + dict["p9"]["t5"] * (-1 + 2 * (x[2] - 8.8) / (96.47 - 8.8)) +dict["p15"]["t5"])))) + dict["p16"]["t5"]))) - 0.1) * (35.69247807 - 1.056643947)
        Y.append(y)
    return Y

# sample generation
params_values = SALib.sample.sobol.sample(problem1,510)
Y = evaluate1(params_values)
Y2 = np.array(Y)
#sobol sensitivity analysis
Si = sobol.analyze(problem1, Y2, print_to_console=True)

print('S1:',Si['S1'])




